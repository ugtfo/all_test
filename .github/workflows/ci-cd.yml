name: Flake8 Check, Tests, and Deploy

on:
  push:
    branches:
      - main
  pull_request:

jobs:
  flake8-check:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v2

    - name: List files in the current directory
      run: ls -R  # Выводим содержимое текущего каталог

    - name: Print current working directory
      run: pwd
      
    - name: Set up Python
      uses: actions/setup-python@v2
      with:
        python-version: 3.x

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        if [ -f requirements.txt ]; then
          pip install -r requirements.txt
        else
          echo "requirements.txt не найден!"
        fi
        pip install flake8

    - name: Set PYTHONPATH
      run: echo "PYTHONPATH=$(pwd)" >> $GITHUB_ENV  

  test:
    runs-on: ubuntu-latest
    needs: flake8-check
    services:
      postgres:
        image: postgres:latest
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: 12345
          POSTGRES_DB: testdb
        ports:
          - 5432:5432

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Set up Python
        uses: actions/setup-python@v2
        with:
          python-version: 3.x



      - name: List files in the current directory
        run: ls -R  # Рекурсивный вывод содержимого каталогов

      - name: Find requirements.txt
        run: find . -name requirements.txt  # Поиск файла requirements.txt

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          if [ -f requirements.txt ]; then pip install -r requirements.txt; fi

      - name: Install Java
        run: |
          sudo apt-get update
          sudo apt-get install -y openjdk-11-jdk  # Установка Java
      - name: Install wget and Allure
        run: |
          sudo apt-get update
          sudo apt-get install -y wget
          wget https://github.com/allure-framework/allure2/releases/latest/download/allure-2.20.1.zip -O allure.zip  # Замените на актуальную версию
          sudo apt-get install -y unzip
          unzip allure.zip -d /opt/allure
          echo 'export PATH=$PATH:/opt/allure/allure-2.20.1/bin' >> $GITHUB_ENV  # Добавляем Allure в PATH
      - name: Run tests
        run: |
          mvn clean test site  # Выполнение тестов с помощью Maven
          allure generate target/allure-results -o allure-report --clean  # Генерация отчета Allure
      - name: Upload Allure results
        uses: actions/upload-artifact@v3  
        with:
          name: allure-results
          path: target/allure-results  # Убедитесь, что путь к результатам тестирования корректен
      - name: Upload Allure report
        uses: actions/upload-artifact@v3
        with:
          name: allure-report
          path: allure-report
  # Собрать и отправить образ приложения на DockerHub
  build:
    runs-on: ubuntu-latest
    needs: test  # Замените на "test", чтобы зависеть от предыдущего шага
    steps:
      - name: Check out the repo
        uses: actions/checkout@v2 

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1 

      - name: Login to Docker 
        uses: docker/login-action@v1 
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Push to Docker Hub
        uses: docker/build-push-action@v2 
        with:
          push: true
          tags: esseniya/testrepo:latest

      # - name: Set environment variable
      #   run: echo "DOCKER_IMAGE=esseniya/testrepo:latest" >> $GITHUB_ENV

      # - name: Use the environment variable
      #   run: echo "Image pushed: ${{ env.DOCKER_IMAGE }}"

