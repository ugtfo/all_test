name: Flake8 Check, Tests, and Deploy

on:
  push:
    branches:
      - main
  pull_request:

jobs:
  flake8-check:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v2

    - name: List files in the current directory
      run: ls -R  # Выводим содержимое текущего каталог

    - name: Print current working directory
      run: pwd
      
    - name: Set up Python
      uses: actions/setup-python@v2
      with:
        python-version: 3.x
        

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        if [ -f requirements.txt ]; then
          pip install -r requirements.txt
        else
          echo "requirements.txt не найден!"
        fi
        pip install flake8

    test:
      runs-on: ubuntu-latest
      needs: flake8-check
      services:
        postgres:
          image: postgres:latest  # Используйте официальный образ PostgreSQL
          env:
            POSTGRES_USER: postgres
            POSTGRES_PASSWORD: 12345
            POSTGRES_DB: testdb
          ports:
            - 5433:5433

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Set up Python
        uses: actions/setup-python@v2
        with:
          python-version: 3.x

      - name: List files in the current directory
        run: ls -R  # Рекурсивный вывод содержимого каталогов

      - name: Find requirements.txt
        run: find . -name requirements.txt  # Поиск файла requirements.txt

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          if [ -f requirements.txt ]; then pip install -r requirements.txt; fi

      - name: Wait for PostgreSQL to be ready
        run: |
          for i in {30..0}; do
            if pg_isready -h localhost -p 5432; then
              echo "PostgreSQL is ready!"
              break
            fi
            echo "Waiting for PostgreSQL to be ready..."
            sleep 1
          done

      - name: Run tests
        run: |
          pytest --alluredir=allure-results  # Запуск тестов и сохранение результатов Allure

      - name: Upload Allure results
        uses: actions/upload-artifact@v2
        with:
          name: allure-results
          path: allure-results

  # Собрать и отправить образ приложения на DockerHub
  build:
    runs-on: ubuntu-latest
    needs: test  # Замените на "test", чтобы зависеть от предыдущего шага
    steps:
      - name: Check out the repo
        uses: actions/checkout@v2 

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1 

      - name: Login to Docker 
        uses: docker/login-action@v1 
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Push to Docker Hub
        uses: docker/build-push-action@v2 
        with:
          push: true
          tags: esseniya/testrepo:latest
